export const createAggregator=e=>{const{getExchangeRate:t}=e;let s="";return{addText:e=>{s+=e},aggregate:()=>{const{result:e,skippedRows:n}=(e=>{const[t,...s]=e.split("\n"),n=t.split(",").map((e=>e.trim())),r=[];let c=0;for(const e of s){const t=e.split(",").map((e=>e.trim()));if(t.length!==n.length){c++;continue}let s=!1;const p=t.reduce(((e,t,r)=>{const c=n[r];return"civ"===c&&"humans"!==t&&"blobs"!==t&&"monsters"!==t&&(s=!0),"spend"===c&&t<0&&(s=!0),e[c]=t,e}),{});s?c++:r.push(p)}return{result:r,skippedRows:c}})(s),r=e.map((e=>t(e.civ)));return((e,t)=>{const s=e.reduce(((e,t)=>{const s=t.date;return e[s]||(e[s]=0),e[s]+=t.spend,e}),{}),n=e.reduce(((e,t)=>{const s=t.civ;return e[s]||(e[s]=0),e[s]+=t.spend,e}),{}),r=Object.entries(s),[c,p]=r.reduce(((e,t)=>t[1]<e[1]?t:e),r[0]),[a,d]=r.reduce(((e,t)=>t[1]>e[1]?t:e),r[0]),i=Object.entries(n),[o]=i.reduce(((e,t)=>t[1]<e[1]?t:e),i[0]),[l]=i.reduce(((e,t)=>t[1]>e[1]?t:e),i[0]),u=e.reduce(((e,t)=>e+t.spend),0),g=u/e.length;return{total_spend_galactic:u,rows_affected:e.length,less_spent_at:parseInt(c),big_spent_at:parseInt(a),less_spent_value:p,big_spent_value:d,average_spend_galactic:g,big_spent_civ:l,less_spent_civ:o,ivalid_rows:t}})(e.map(((e,t)=>({...e,spend:+e.spend*r[t]}))),n)}}};